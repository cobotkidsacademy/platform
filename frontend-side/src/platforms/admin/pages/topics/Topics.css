
## **5. Backend Routes for Notes Management**

Now let me add the missing backend routes for notes functionality:

```javascript:backend/server.js
// ===== NOTES ROUTES ===== //

// GET all notes for a specific topic
app.get('/cobotKidsKenya/courses/:courseId/topics/:topicId/notes', async (req, res) => {
  try {
    const { courseId, topicId } = req.params;

    // Validate IDs
    if (!mongoose.Types.ObjectId.isValid(courseId) || !mongoose.Types.ObjectId.isValid(topicId)) {
      return res.status(400).json({ 
        success: false,
        error: 'Invalid course or topic ID format' 
      });
    }

    // Find course and topic
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ 
        success: false,
        error: 'Course not found' 
      });
    }

    const topic = course.topics.id(topicId);
    if (!topic) {
      return res.status(404).json({ 
        success: false,
        error: 'Topic not found' 
      });
    }

    res.status(200).json({
      success: true,
      data: topic.notes || []
    });
  } catch (error) {
    console.error('Error fetching notes:', error);
    res.status(500).json({ 
      success: false,
      error: 'Server error while fetching notes' 
    });
  }
});

// POST - Add a new note to a topic
app.post('/cobotKidsKenya/courses/:courseId/topics/:topicId/notes', async (req, res) => {
  try {
    const { courseId, topicId } = req.params;
    const { title, description, content, images } = req.body;

    // Validate IDs
    if (!mongoose.Types.ObjectId.isValid(courseId) || !mongoose.Types.ObjectId.isValid(topicId)) {
      return res.status(400).json({ 
        success: false,
        error: 'Invalid course or topic ID format' 
      });
    }

    // Validate input
    if (!content || typeof content !== 'string') {
      return res.status(400).json({ 
        success: false,
        error: 'Note content is required and must be a string' 
      });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ 
        success: false,
        error: 'Course not found' 
      });
    }

    const topic = course.topics.id(topicId);
    if (!topic) {
      return res.status(404).json({ 
        success: false,
        error: 'Topic not found' 
      });
    }

    // Create new note
    const newNote = {
      title: title ? title.trim() : `Note ${topic.notes.length + 1}`,
      description: description ? description.trim() : '',
      content: content.trim(),
      images: Array.isArray(images) ? images.filter(url => url.trim()) : []
    };

    topic.notes.push(newNote);
    await course.save();

    // Get the newly added note
    const addedNote = topic.notes[topic.notes.length - 1];

    res.status(201).json({
      success: true,
      message: 'Note created successfully',
      data: addedNote
    });
  } catch (error) {
    console.error('Error creating note:', error);
    res.status(500).json({ 
      success: false,
      error: 'Server error while creating note' 
    });
  }
});

// PUT - Update a note
app.put('/cobotKidsKenya/courses/:courseId/topics/:topicId/notes/:noteId', async (req, res) => {
  try {
    const { courseId, topicId, noteId } = req.params;
    const { title, description, content, images } = req.body;

    // Validate IDs
    if (!mongoose.Types.ObjectId.isValid(courseId) || !mongoose.Types.ObjectId.isValid(topicId)) {
      return res.status(400).json({ 
        success: false,
        error: 'Invalid course or topic ID format' 
      });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ 
        success: false,
        error: 'Course not found' 
      });
    }

    const topic = course.topics.id(topicId);
    if (!topic) {
      return res.status(404).json({ 
        success: false,
        error: 'Topic not found' 
      });
    }

    const note = topic.notes.id(noteId);
    if (!note) {
      return res.status(404).json({ 
        success: false,
        error: 'Note not found' 
      });
    }

    // Update note
    if (title !== undefined) note.title = title.trim();
    if (description !== undefined) note.description = description.trim();
    if (content !== undefined) note.content = content.trim();
    if (images !== undefined) note.images = Array.isArray(images) ? images.filter(url => url.trim()) : [];

    await course.save();

    res.status(200).json({
      success: true,
      message: 'Note updated successfully',
      data: note
    });
  } catch (error) {
    console.error('Error updating note:', error);
    res.status(500).json({ 
      success: false,
      error: 'Server error while updating note' 
    });
  }
});

// DELETE - Delete a note
app.delete('/cobotKidsKenya/courses/:courseId/topics/:topicId/notes/:noteId', async (req, res) => {
  try {
    const { courseId, topicId, noteId } = req.params;

    // Validate IDs
    if (!mongoose.Types.ObjectId.isValid(courseId) || !mongoose.Types.ObjectId.isValid(topicId)) {
      return res.status(400).json({ 
        success: false,
        error: 'Invalid course or topic ID format' 
      });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ 
        success: false,
        error: 'Course not found' 
      });
    }

    const topic = course.topics.id(topicId);
    if (!topic) {
      return res.status(404).json({ 
        success: false,
        error: 'Topic not found' 
      });
    }

    const note = topic.notes.id(noteId);
    if (!note) {
      return res.status(404).json({ 
        success: false,
        error: 'Note not found' 
      });
    }

    // Remove the note
    topic.notes.pull(noteId);
    await course.save();

    res.status(200).json({
      success: true,
      message: 'Note deleted successfully'
    });
  } catch (error) {
    console.error('Error deleting note:', error);
    res.status(500).json({ 
      success: false,
      error: 'Server error while deleting note' 
    });
  }
});

// DELETE - Delete a topic
app.delete('/cobotKidsKenya/courses/:courseId/topics/:topicId', async (req, res) => {
  try {
    const { courseId, topicId } = req.params;

    // Validate IDs
    if (!mongoose.Types.ObjectId.isValid(courseId) || !mongoose.Types.ObjectId.isValid(topicId)) {
      return res.status(400).json({ 
        success: false,
        error: 'Invalid course or topic ID format' 
      });
    }

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ 
        success: false,
        error: 'Course not found' 
      });
    }

    const topic = course.topics.id(topicId);
    if (!topic) {
      return res.status(404).json({ 
        success: false,
        error: 'Topic not found' 
      });
    }

    // Remove the topic
    course.topics.pull(topicId);
    await course.save();

    res.status(200).json({
      success: true,
      message: 'Topic deleted successfully'
    });
  } catch (error) {
    console.error('Error deleting topic:', error);
    res.status(500).json({ 
      success: false,
      error: 'Server error while deleting topic' 
    });
  }
});

// ===== END NOTES ROUTES ===== //
```

## **6. Enhanced Course Model for Notes**

Let me also check and update the Course model to ensure it properly supports notes:

```css:client/src/platforms/admin/pages/topics/Topics.css
.topics-management {
  padding: 20px;
  max-width: 1400px;
  margin: 0 auto;
}

.topics-header {
  text-align: center;
  margin-bottom: 30px;
}

.topics-header h1 {
  color: #333;
  margin-bottom: 10px;
  font-size: 2.5rem;
}

.topics-header p {
  color: #666;
  font-size: 16px;
}

.course-selection {
  display: flex;
  gap: 20px;
  align-items: end;
  margin-bottom: 30px;
  padding: 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.selection-group {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.selection-group label {
  font-weight: bold;
  margin-bottom: 8px;
  color: #333;
}

.course-select {
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 14px;
  transition: border-color 0.3s;
}

.course-select:focus {
  outline: none;
  border-color: #007bff;
}

.course-select:disabled {
  background-color: #f8f9fa;
  cursor: not-allowed;
}

.add-topic-btn {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: transform 0.2s;
  white-space: nowrap;
}

.add-topic-btn:hover {
  transform: translateY(-2px);
}

.add-topic-btn:disabled {
  background: #6c757d;
  cursor: not-allowed;
  transform: none;
}

.btn-icon {
  font-size: 16px;
}

.error-messages {
  margin-bottom: 20px;
}

.error-message {
  background: #f8d7da;
  border: 1px solid #f5c6cb;
  color: #721c24;
  padding: 12px 16px;
  border-radius: 8px;
  margin-bottom: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.error-message:last-child {
  margin-bottom: 0;
}

.topics-section {
  background: white;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #f8f9fa;
}

.section-header h2 {
  margin: 0;
  color: #333;
  font-size: 1.8rem;
}

.section-stats {
  display: flex;
  gap: 20px;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 10px 15px;
  background: #f8f9fa;
  border-radius: 8px;
  min-width: 80px;
}

.stat-number {
  font-size: 1.5rem;
  font-weight: bold;
  color: #007bff;
}

.stat-label {
  font-size: 12px;
  color: #666;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.loading-state {
  text-align: center;
  padding: 60px 20px;
}

.loading-spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #007bff;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.no-topics {
  text-align: center;
  padding: 60px 20px;
}

.no-topics-icon {
  font-size: 4rem;
  margin-bottom: 20px;
}

.no-topics h3 {
  color: #333;
  margin-bottom: 10px;
}

.no-topics p {
  color: #666;
  margin-bottom: 30px;
}

.add-first-topic-btn {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  border: none;
  padding: 15px 30px;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
  font-size: 16px;
}

.topics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  gap: 25px;
}

.topic-card {
  background: white;
  border: 2px solid #e9ecef;
  border-radius: 12px;
  overflow: hidden;
  transition: all 0.3s ease;
}

.topic-card:hover {
  border-color: #007bff;
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 123, 255, 0.2);
}

.topic-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border-bottom: 1px solid #e9ecef;
}

.topic-name {
  margin: 0;
  color: #333;
  font-size: 1.3rem;
  font-weight: 600;
}

.topic-actions {
  display: flex;
  gap: 10px;
}

.action-btn {
  display: flex;
  align-items: center;
  gap: 5px;
  padding: 8px 12px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 12px;
  font-weight: 500;
  transition: all 0.2s;
}

.action-btn.primary {
  background: #007bff;
  color: white;
}

.action-btn.primary:hover {
  background: #0056b3;
}

.action-btn.delete {
  background: #dc3545;
  color: white;
}

.action-btn.delete:hover {
  background: #c82333;
}

.topic-content {
  padding: 20px;
}

.notes-count {
  margin-bottom: 15px;
}

.count-badge {
  background: #e9ecef;
  color: #495057;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
}

.notes-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.note-item {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 15px;
  transition: all 0.2s;
}

.note-item:hover {
  background: #e9ecef;
  border-color: #007bff;
}

.note-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.note-title {
  margin: 0;
  color: #333;
  font-size: 1rem;
  font-weight: 600;
}

.delete-note-btn {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  cursor: pointer;
  font-size: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
}

.delete-note-btn:hover {
  background: #c82333;
}

.note-description {
  margin: 0 0 10px 0;
  color: #666;
  font-size: 14px;
  line-height: 1.4;
}

.note-images {
  margin-top: 10px;
}

.image-count {
  font-size: 12px;
  color: #666;
}

.no-notes {
  text-align: center;
  padding: 30px 20px;
  color: #666;
}

.no-notes p {
  margin: 0 0 15px 0;
}

.add-note-btn {
  background: #007bff;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 12px;
  font-weight: 500;
}

.add-note-btn:hover {
  background: #0056b3;
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  animation: fadeIn 0.3s ease;
}

.modal-content {
  background: white;
  border-radius: 12px;
  padding: 0;
  max-width: 500px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  animation: slideUp 0.3s ease;
}

.modal-content.large {
  max-width: 800px;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 2px solid #f8f9fa;
}

.modal-header h2 {
  margin: 0;
  color: #333;
  font-size: 1.5rem;
}

.close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #666;
  padding: 0;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background-color 0.2s;
}

.close-btn:hover {
  background: #f8f9fa;
  color: #333;
}

.close-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.topic-form,
.note-form {
  padding: 20px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group label {
  margin-bottom: 8px;
  font-weight: bold;
  color: #333;
}

.form-input,
.form-textarea {
  padding: 12px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 14px;
  transition: border-color 0.3s;
  font-family: inherit;
}

.form-input:focus,
.form-textarea:focus {
  outline: none;
  border-color: #007bff;
}

.form-input:disabled,
.form-textarea:disabled {
  background-color: #f8f9fa;
  cursor: not-allowed;
}

.form-textarea {
  resize: vertical;
  min-height: 100px;
}

.form-actions {
  display: flex;
  gap: 15px;
  justify-content: flex-end;
  margin-top: 30px;
}

.cancel-btn {
  background: #6c757d;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
}

.cancel-btn:hover {
  background: #545b62;
}

.cancel-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.submit-btn {
  background: #007bff;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
}

.submit-btn:hover {
  background: #0056b3;
}

.submit-btn:disabled {
  background: #6c757d;
  cursor: not-allowed;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .course-selection {
    flex-direction: column;
    gap: 15px;
  }
  
  .section-header {
    flex-direction: column;
    gap: 15px;
    text-align: center;
  }
  
  .section-stats {
    justify-content: center;
  }
  
  .topics-grid {
    grid-template-columns: 1fr;
  }
  
  .topic-header {
    flex-direction: column;
    gap: 15px;
    align-items: flex-start;
  }
  
  .topic-actions {
    width: 100%;
    justify-content: flex-end;
  }
  
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .modal-content {
    width: 95%;
    margin: 10px;
  }
  
  .form-actions {
    flex-direction: column;
  }
}

